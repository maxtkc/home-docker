services:
  db:
    image: postgres:15-alpine
    restart: always
    volumes:
      - db:/var/lib/postgresql/data:Z
    env_file:
      - .env
      - secrets.env
    labels:
      - backup.stop=true

  immich_postgres:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE_NAME:-immich}
      POSTGRES_USER: ${DB_USERNAME:-immich}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-}
    env_file:
      - .env
      - secrets.env
    volumes:
      - immich_postgres:/var/lib/postgresql/data
    labels:
      - backup.stop=true

  redis:
    image: redis:alpine
    restart: always

  app:
    # image: nextcloud:26.0.3-fpm
    build: ./my_nc
    restart: always
    volumes:
      - nextcloud:/var/www/html:z
      - type: tmpfs
        target: /tmp:exec
      - /var/run/docker.sock:/var/run/docker.sock:z,ro
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
    env_file:
      - .env
      - secrets.env
    depends_on:
      - db
      - redis
    labels:
      - backup.stop=true

  web:
    build: ./web
    restart: always
    volumes:
      - nextcloud:/var/www/html:z,ro
    environment:
      - VIRTUAL_HOST=nc.kcfam.us
      - LETSENCRYPT_HOST=nc.kcfam.us
      - LETSENCRYPT_EMAIL=maxkatzchristy@gmail.com
    depends_on:
      - app
    networks:
      - proxy-tier
      - default

  cron:
    # image: nextcloud:26.0.3-fpm
    build: ./my_nc
    restart: always
    volumes:
      - nextcloud:/var/www/html:z
    entrypoint: /cron.sh
    depends_on:
      - db
      - redis

  proxy:
    build: ./proxy
    restart: always
    ports:
      - 80:80
      - 443:443
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    volumes:
      - certs:/etc/nginx/certs:z,ro
      - vhost.d:/etc/nginx/vhost.d:z
      - html:/usr/share/nginx/html:z
      - /var/run/docker.sock:/tmp/docker.sock:z,ro
    networks:
      - proxy-tier

  letsencrypt-companion:
    image: nginxproxy/acme-companion
    restart: always
    volumes:
      - certs:/etc/nginx/certs:z
      - acme:/etc/acme.sh:z
      - vhost.d:/etc/nginx/vhost.d:z
      - html:/usr/share/nginx/html:z
      - /var/run/docker.sock:/var/run/docker.sock:z,ro
    networks:
      - proxy-tier
    depends_on:
      - proxy

  grampsweb: &grampsweb
    container_name: grampsweb
    image: ghcr.io/gramps-project/grampsweb:latest
    restart: always
    environment: &grampsweb-env
      GRAMPSWEB_TREE: "Kamenetsky-Meek Family"  # will create a new tree if not exists
      VIRTUAL_PORT: "5000"
      VIRTUAL_HOST: "gramps.kcfam.us"  # e.g. gramps.mydomain.com
      # LETSENCRYPT_TEST: "true"
      LETSENCRYPT_HOST: "gramps.kcfam.us"   # e.g. gramps.mydomain.com
      LETSENCRYPT_EMAIL: "maxkatzchristy@gmail.com"  # your email
      GRAMPSWEB_CELERY_CONFIG__broker_url: "redis://grampsweb_redis:6379/0"
      GRAMPSWEB_CELERY_CONFIG__result_backend: "redis://grampsweb_redis:6379/0"
      GRAMPSWEB_RATELIMIT_STORAGE_URI: "redis://grampsweb_redis:6379/1"
    volumes:
      - gramps_users:/app/users
      - gramps_index:/app/indexdir
      - gramps_thumb_cache:/app/thumbnail_cache
      - gramps_cache:/app/cache
      - gramps_secret:/app/secret
      - gramps_db:/root/.gramps/grampsdb
      - gramps_media:/app/media
      - gramps_tmp:/tmp
    networks:
      - proxy-tier
      - default

  grampsweb_celery:
    <<: *grampsweb  # YAML merge key copying the entire grampsweb service config
    container_name: grampsweb_celery
    depends_on:
      - grampsweb_redis
    environment:
      <<: *grampsweb-env  # YAML merge key copying the grampsweb environment config
      # overriding let's encrypt variables since celery is not exposed
      VIRTUAL_PORT: ""
      VIRTUAL_HOST: ""
      LETSENCRYPT_HOST: ""
      LETSENCRYPT_EMAIL: ""
    command: celery -A gramps_webapi.celery worker --loglevel=INFO

  grampsweb_redis:
    image: docker.io/library/redis:7.2.4-alpine
    container_name: grampsweb_redis
    restart: always

  backup:
    image: offen/docker-volume-backup:latest
    restart: always
    environment:
      - BACKUP_FILENAME=homeserver-backup-%Y%m%d-%H%M%S.tar.gz
      - BACKUP_CRON_EXPRESSION=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=1
      - BACKUP_STOP_DURING_BACKUP_LABEL=backup.stop
      - BACKUP_EXCLUDE_REGEXP=^/backup/tmp/|\.tmp$|/backups/.*\.sql\.gz\.tmp$
      - NOTIFICATION_URLS=http://uptime-kuma:3001/api/push/DAILY_BACKUP_KEY?status=up&msg=Daily%20backup%20completed||http://uptime-kuma:3001/api/push/DAILY_BACKUP_KEY?status=down&msg=Daily%20backup%20failed
    volumes:
      - nextcloud:/backup/nextcloud:ro
      - immich_upload:/backup/immich_upload:ro
      - immich_postgres:/backup/immich_postgres:ro
      - /mnt/backups:/archive
      - /var/run/docker.sock:/var/run/docker.sock:ro

  backup_weekly:
    image: offen/docker-volume-backup:latest
    restart: always
    environment:
      - BACKUP_FILENAME=homeserver-backup-weekly-%Y%m%d-%H%M%S.tar.gz
      - BACKUP_CRON_EXPRESSION=0 3 * * 0  # Weekly on Sunday at 3 AM
      - BACKUP_RETENTION_DAYS=7
      - BACKUP_STOP_DURING_BACKUP_LABEL=backup.stop
      - BACKUP_EXCLUDE_REGEXP=^/backup/tmp/|\.tmp$|/backups/.*\.sql\.gz\.tmp$
      - NOTIFICATION_URLS=http://uptime-kuma:3001/api/push/WEEKLY_BACKUP_KEY?status=up&msg=Weekly%20backup%20completed||http://uptime-kuma:3001/api/push/WEEKLY_BACKUP_KEY?status=down&msg=Weekly%20backup%20failed
    volumes:
      - nextcloud:/backup/nextcloud:ro
      - immich_upload:/backup/immich_upload:ro
      - immich_postgres:/backup/immich_postgres:ro
      - /mnt/backups:/archive
      - /var/run/docker.sock:/var/run/docker.sock:ro

  backup_monthly:
    image: offen/docker-volume-backup:latest
    restart: always
    environment:
      - BACKUP_FILENAME=homeserver-backup-monthly-%Y%m%d-%H%M%S.tar.gz
      - BACKUP_CRON_EXPRESSION=0 4 1 * *  # Monthly on 1st day at 4 AM
      - BACKUP_RETENTION_DAYS=30
      - BACKUP_STOP_DURING_BACKUP_LABEL=backup.stop
      - BACKUP_EXCLUDE_REGEXP=^/backup/tmp/|\.tmp$|/backups/.*\.sql\.gz\.tmp$
      - NOTIFICATION_URLS=http://uptime-kuma:3001/api/push/MONTHLY_BACKUP_KEY?status=up&msg=Monthly%20backup%20completed||http://uptime-kuma:3001/api/push/MONTHLY_BACKUP_KEY?status=down&msg=Monthly%20backup%20failed
    volumes:
      - db:/backup/postgresql:ro
      - gramps_users:/backup/gramps_users:ro
      - gramps_index:/backup/gramps_index:ro
      - gramps_thumb_cache:/backup/gramps_thumb_cache:ro
      - gramps_cache:/backup/gramps_cache:ro
      - gramps_secret:/backup/gramps_secret:ro
      - gramps_db:/backup/gramps_db:ro
      - gramps_media:/backup/gramps_media:ro
      - uptime_kuma:/backup/uptime_kuma:ro
      - grafana_data:/backup/grafana_data:ro
      - prometheus_data:/backup/prometheus_data:ro
      - /mnt/backups:/archive
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # Immich Services
  immich_server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:release
    command: ['start.sh', 'immich']
    volumes:
      - immich_upload:/usr/src/app/upload
      - nextcloud:/mnt/nextcloud:ro  # Read-only access to Nextcloud data
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
      - secrets.env
    environment:
      - VIRTUAL_HOST=im.kcfam.us
      - VIRTUAL_PORT=2283
      - LETSENCRYPT_HOST=im.kcfam.us
      - LETSENCRYPT_EMAIL=maxkatzchristy@gmail.com
    depends_on:
      - redis
      - immich_postgres
    restart: always
    networks:
      - proxy-tier
      - default

  immich_microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:release
    command: ['start.sh', 'microservices']
    volumes:
      - immich_upload:/usr/src/app/upload
      - nextcloud:/mnt/nextcloud:ro  # Read-only access to Nextcloud data
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
      - secrets.env
    depends_on:
      - redis
      - immich_postgres
    restart: always

  immich_machine_learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:release
    volumes:
      - model_cache:/cache
    env_file:
      - .env
      - secrets.env
    restart: always
    ports:
      - 2283:2283

  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:latest
    restart: always
    ports:
      - "3001:3001"
    volumes:
      - uptime_kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - VIRTUAL_HOST=uptime.kcfam.us
      - VIRTUAL_PORT=3001
      - LETSENCRYPT_HOST=uptime.kcfam.us
      - LETSENCRYPT_EMAIL=maxkatzchristy@gmail.com
    networks:
      - proxy-tier
      - default
    labels:
      - backup.stop=true

  # Monitoring Stack
  grafana:
    container_name: grafana
    build: ./grafana
    restart: always
    user: "472"
    environment:
      - VIRTUAL_HOST=gf.kcfam.us
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=gf.kcfam.us
      - LETSENCRYPT_EMAIL=maxkatzchristy@gmail.com
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - proxy-tier
      - default
    depends_on:
      - prometheus
    labels:
      - backup.stop=true

  prometheus:
    container_name: prometheus
    build: ./prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - prometheus_data:/prometheus
    networks:
      - default
    depends_on:
      - node-exporter
      - cadvisor

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    restart: always
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - default

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    restart: always
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - default
    devices:
      - /dev/kmsg

  # snapserver:
  #   container_name: snapserver
  #   image: ivdata/snapserver:latest
  #   restart: always
  #   ports:
  #     - "1704:1704"  # Snapcast control port
  #     - "1705:1705"  # Snapcast stream port
  #     - "1780:1780"  # Web interface (HTTP)
  #   volumes:
  #     - snapserver_config:/opt/snapserver/etc
  #     - mopidy_snapfifo:/tmp/snapfifo  # Shared FIFO with Mopidy
  #   environment:
  #     - VIRTUAL_HOST=snap.kcfam.us
  #     - VIRTUAL_PORT=1780
  #     - LETSENCRYPT_HOST=snap.kcfam.us
  #     - LETSENCRYPT_EMAIL=maxkatzchristy@gmail.com
  #   networks:
  #     - proxy-tier
  #     - default
  #   depends_on:
  #     - mopidy

  # mopidy:
  #   container_name: mopidy
  #   image: sweisgerber/mopidy:alpine
  #   restart: always
  #   ports:
  #     - "6600:6600"  # MPD remote control
  #     - "6680:6680"  # Web interface
  #   volumes:
  #     - mopidy_config:/config
  #     - mopidy_data:/data
  #     - mopidy_snapfifo:/tmp/snapfifo  # Shared FIFO with Snapcast
  #     - nextcloud:/mnt/nextcloud:ro  # Read-only access to Nextcloud data
  #   environment:
  #     - PUID=33
  #     - PGID=33
  #     - TZ=America/New_York
  #     - VIRTUAL_HOST=mopidy.kcfam.us
  #     - VIRTUAL_PORT=6680
  #     - LETSENCRYPT_HOST=mopidy.kcfam.us
  #     - LETSENCRYPT_EMAIL=maxkatzchristy@gmail.com
  #   networks:
  #     - proxy-tier
  #     - default

volumes:
  db:
  nextcloud:
  certs:
  acme:
  vhost.d:
  html:
  gramps_users:
  gramps_index:
  gramps_thumb_cache:
  gramps_cache:
  gramps_secret:
  gramps_db:
  gramps_media:
  gramps_tmp:
  immich_upload:
  immich_postgres:
  model_cache:
  uptime_kuma:
  grafana_data:
  prometheus_data:
  # snapserver_config:
  # mopidy_config:
  # mopidy_data:
  # mopidy_snapfifo:

networks:
  proxy-tier:
